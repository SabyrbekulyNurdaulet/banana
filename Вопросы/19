# **19. Переменные в Python передаются по ссылке или по значению?**

Переменные в Python передаются по **ссылке** или **значению**, в зависимости от типа данных и способа передачи.

1. **Неизменяемые типы данных** (например, числа, строки, кортежи) передаются по **значению**. Это означает, что при передаче переменной в функцию создается копия значения переменной, и изменения внутри функции не затрагивают исходную переменную.

Пример:

```python
def modify_value(x):
    x += 1
    print("Inside function:", x)

num = 10
modify_value(num)
print("Outside function:", num)

```

Вывод:

```
Inside function: 11
Outside function: 10

```

1. **Изменяемые типы данных** (например, списки, словари, множества) передаются по **ссылке**. Это означает, что переменные в функции и за ее пределами ссылаются на один и тот же объект в памяти, поэтому изменения переменной внутри функции отразятся на исходной переменной.

Пример:

```python
def modify_list(lst):
    lst.append(4)
    print("Inside function:", lst)

my_list = [1, 2, 3]
modify_list(my_list)
print("Outside function:", my_list)

```

Вывод:

```
Inside function: [1, 2, 3, 4]
Outside function: [1, 2, 3, 4]

```

Таким образом, в Python переменные передаются по **значению** для неизменяемых типов данных и по **ссылке** для изменяемых типов данных. Это важно понимать при работе с функциями и изменяемыми объектами, чтобы избежать неожиданных результатов.
