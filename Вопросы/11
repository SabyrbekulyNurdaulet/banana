# 11.  Модули. Определение и подключение модулей

Модули в Python представляют собой файлы с расширением `.py`, которые содержат код Python. Они позволяют организовывать код в логические блоки, что делает его более структурированным и удобным для повторного использования. Давайте рассмотрим определение и подключение модулей.

### Определение модулей

Простой пример определения модуля `my_module.py`:

```python
pythonКопировать код
# my_module.py

def greet(name):
    print(f"Hello, {name}!")

```

### Подключение модулей

После определения модуля его можно подключить в другом файле с помощью ключевого слова `import`.

```python
pythonКопировать код
# main.py

import my_module

my_module.greet("Alice")  # Вывод: Hello, Alice!

```

### Переименование модулей

Модули можно переименовывать при их импорте с помощью ключевого слова `as`.

```python
pythonКопировать код
# main.py

import my_module as mm

mm.greet("Bob")  # Вывод: Hello, Bob!

```

### Импорт конкретных элементов

Можно импортировать только конкретные элементы модуля, не импортируя весь модуль целиком.

```python
pythonКопировать код
# main.py

from my_module import greet

greet("Charlie")  # Вывод: Hello, Charlie!

```

### Импорт всех элементов модуля

Можно импортировать все элементы модуля, используя символ `*`.

```python
pythonКопировать код
# main.py

from my_module import *

greet("David")  # Вывод: Hello, David!

```

### Проверка на модуль или запуск как скрипт

Модуль может быть как самостоятельным скриптом, так и импортирован в другой файл. Для проверки того, выполняется ли модуль как скрипт или импортируется, используется переменная `__name__`.

```python
pythonКопировать код
# my_module.py

def greet(name):
    print(f"Hello, {name}!")

if __name__ == "__main__":
    greet("World")  # Выполнится только если модуль запущен как скрипт

```

При запуске модуля как скрипта (например, `python my_module.py`), код внутри блока `if __name__ == "__main__":` будет выполнен.

Это основы определения и подключения модулей в Python. Модули позволяют организовывать код в логические блоки, делая его более структурированным и удобным для повторного использования.
