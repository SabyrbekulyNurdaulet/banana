# 7. Класс как абстрактный тип. Создание и использование классов

### 

Классы в Python представляют собой механизм для создания собственных типов данных. Они позволяют объединять данные и функции в единый объект. Класс можно рассматривать как абстрактный тип, описывающий некоторый объект или концепцию.

### Создание класса

Чтобы создать класс в Python, используется ключевое слово `class`, за которым следует имя класса и двоеточие. Далее идет блок кода, содержащий атрибуты и методы класса.

Пример создания простого класса `Person`, представляющего человека с именем и возрастом:

```python
pythonКопировать код
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

```

В примере выше определен конструктор `__init__()`, который инициализирует атрибуты объекта класса. Первый параметр `self` обозначает сам объект, который создается на основе класса, и используется для доступа к его атрибутам и методам.

### Создание объекта класса

Чтобы создать объект класса, нужно вызвать его конструктор, передав необходимые параметры. После создания объекта можно обращаться к его атрибутам и методам.

```python
pythonКопировать код
person1 = Person("Alice", 30)
print(person1.name)  # Вывод: Alice
print(person1.age)   # Вывод: 30

```

### Методы класса

Методы класса — это функции, определенные внутри класса, которые могут использоваться для выполнения различных действий с объектами класса. Они могут иметь доступ к атрибутам объекта через параметр `self`.

Пример добавления метода `say_hello()` в класс `Person`:

```python
pythonКопировать код
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def say_hello(self):
        print(f"Hello, my name is {self.name} and I am {self.age} years old.")

```

### Использование методов класса

Методы класса вызываются на объектах класса с использованием точечной нотации.

```python
pythonКопировать код
person2 = Person("Bob", 25)
person2.say_hello()  # Вывод: Hello, my name is Bob and I am 25 years old.

```

### Наследование

Классы могут наследовать атрибуты и методы других классов. Это позволяет создавать иерархии классов и переиспользовать код.

Пример создания класса `Employee`, который наследует атрибуты и методы класса `Person`:

```python
pythonКопировать код
class Employee(Person):
    def __init__(self, name, age, position):
        super().__init__(name, age)
        self.position = position

    def get_position(self):
        return self.position

```

В примере выше используется функция `super()`, которая позволяет вызывать методы родительского класса.

### Полиморфизм

Полиморфизм в объектно-ориентированном программировании означает возможность использования одного и того же метода для различных классов. Это позволяет упростить код и сделать его более гибким.

Пример полиморфизма:

```python
pythonКопировать код
def print_info(obj):
    obj.say_hello()

person3 = Person("Charlie", 35)
employee1 = Employee("Dave", 40, "Manager")

print_info(person3)   # Вывод: Hello, my name is Charlie and I am 35 years old.
print_info(employee1)  # Вывод: Hello, my name is Dave and I am 40 years old.

```
