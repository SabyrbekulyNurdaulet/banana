# **37. Python полностью поддерживает ООП?**

Да, Python полностью поддерживает объектно-ориентированное программирование (ООП). В Python можно использовать все основные концепции ООП, такие как классы, объекты, наследование, инкапсуляция и полиморфизм. Давайте рассмотрим основные особенности и примеры использования ООП в Python.

### 1. Классы и объекты

Класс – это шаблон для создания объектов. Объект – это экземпляр класса.

```python
pythonКопировать код
class Dog:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def bark(self):
        print(f"{self.name} говорит: Гав!")

# Создание объектов
dog1 = Dog("Бобик", 3)
dog2 = Dog("Шарик", 5)

# Вызов методов
dog1.bark()
dog2.bark()

```

### 2. Наследование

Наследование позволяет создавать новый класс на основе существующего.

```python
pythonКопировать код
class Animal:
    def __init__(self, name):
        self.name = name

    def speak(self):
        pass

class Cat(Animal):
    def speak(self):
        print(f"{self.name} говорит: Мяу!")

# Создание объекта
cat = Cat("Мурзик")
cat.speak()

```

### 3. Инкапсуляция

Инкапсуляция позволяет скрывать внутреннее состояние объекта и ограничивать доступ к его данным напрямую. В Python это достигается с помощью соглашений об именовании (например, с использованием подчеркиваний).

```python
pythonКопировать код
class Car:
    def __init__(self, model):
        self.__model = model  # Приватный атрибут

    def get_model(self):
        return self.__model

    def set_model(self, model):
        self.__model = model

# Создание объекта и доступ к приватным атрибутам через методы
car = Car("Tesla")
print(car.get_model())
car.set_model("BMW")
print(car.get_model())

```

### 4. Полиморфизм

Полиморфизм позволяет использовать один интерфейс для разных типов данных.

```python
pythonКопировать код
class Bird:
    def speak(self):
        print("Птица издает звук")

class Parrot(Bird):
    def speak(self):
        print("Попугай говорит: Привет!")

class Sparrow(Bird):
    def speak(self):
        print("Воробей чирикает")

# Использование полиморфизма
def make_bird_speak(bird):
    bird.speak()

parrot = Parrot()
sparrow = Sparrow()

make_bird_speak(parrot)
make_bird_speak(sparrow)

```

### Заключение

Таким образом, Python предоставляет полный набор инструментов для объектно-ориентированного программирования, позволяя разработчикам использовать классы и объекты, наследование, инкапсуляцию и полиморфизм для написания организованного и поддерживаемого кода.
