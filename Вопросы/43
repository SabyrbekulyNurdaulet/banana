# 43.Типы данных и операции над ними (язык Java).

### 43. Типы данных и операции над ними (язык Java)

В языке Java существует две категории типов данных: **примитивные типы данных** и **ссылочные типы данных**. Каждая из этих категорий используется для различных целей и поддерживает определенные операции.

### Примитивные типы данных

Java поддерживает 8 примитивных типов данных:

1. **byte**:
    - **Размер**: 8 бит
    - **Диапазон**: от -128 до 127
    - **Использование**: для экономии памяти в больших массивах.
2. **short**:
    - **Размер**: 16 бит
    - **Диапазон**: от -32,768 до 32,767
    - **Использование**: аналогично `byte`, но с большим диапазоном значений.
3. **int**:
    - **Размер**: 32 бита
    - **Диапазон**: от -2,147,483,648 до 2,147,483,647
    - **Использование**: наиболее часто используемый тип данных для целых чисел.
4. **long**:
    - **Размер**: 64 бита
    - **Диапазон**: от -9,223,372,036,854,775,808 до 9,223,372,036,854,775,807
    - **Использование**: для чисел большего диапазона, чем `int`.
5. **float**:
    - **Размер**: 32 бита
    - **Диапазон**: ~1.4e-45 до ~3.4e+38 с точностью до 7 знаков
    - **Использование**: для чисел с плавающей запятой (одиночная точность).
6. **double**:
    - **Размер**: 64 бита
    - **Диапазон**: ~4.9e-324 до ~1.8e+308 с точностью до 15 знаков
    - **Использование**: для чисел с плавающей запятой (двойная точность).
7. **char**:
    - **Размер**: 16 бит (представляет один символ Unicode)
    - **Диапазон**: от '\u0000' (0) до '\uffff' (65,535)
    - **Использование**: для хранения символов.
8. **boolean**:
    - **Размер**: 1 бит (значение true или false)
    - **Использование**: для логических значений.

### Операции над примитивными типами данных

- **Арифметические операции**:
    - Сложение (`+`), вычитание (``), умножение (``), деление (`/`), остаток от деления (`%`).
- **Инкремент и декремент**:
    - Инкремент (`++`), декремент (`-`).
- **Операции сравнения**:
    - Равно (`==`), не равно (`!=`), больше (`>`), меньше (`<`), больше или равно (`>=`), меньше или равно (`<=`).
- **Логические операции** (для `boolean`):
    - И (`&&`), ИЛИ (`||`), НЕ (`!`).
- **Побитовые операции**:
    - И (`&`), ИЛИ (`|`), исключающее ИЛИ (`^`), побитовое НЕ (`~`), сдвиг влево (`<<`), сдвиг вправо (`>>`), беззнаковый сдвиг вправо (`>>>`).

### Ссылочные типы данных

Ссылочные типы данных указывают на объекты и включают:

1. **Классы**: используются для создания объектов. Пример: `String`, `Scanner`, пользовательские классы.
2. **Интерфейсы**: используются для определения набора методов, которые класс должен реализовать.
3. **Массивы**: структуры данных, которые хранят элементы одного типа.

### Операции над ссылочными типами данных

- **Создание объектов**:
    - Использование оператора `new`: `MyClass obj = new MyClass();`
- **Доступ к полям и методам**:
    - Доступ через точку: `obj.method()`, `obj.field`.
- **Сравнение ссылок**:
    - Оператор `==` проверяет, указывают ли две ссылки на один и тот же объект.
    - Метод `equals()` проверяет логическое равенство объектов.
- **Пример использования ссылочных типов данных**:

```java
class Dog {
    String name;
    int age;

    Dog(String name, int age) {
        this.name = name;
        this.age = age;
    }

    void bark() {
        System.out.println(name + " says: Woof!");
    }
}

public class Main {
    public static void main(String[] args) {
        Dog myDog = new Dog("Rex", 5);
        myDog.bark();  // Output: Rex says: Woof!
    }
}

```

### Примеры инициализации и использования примитивных типов данных:

```java
public class Main {
    public static void main(String[] args) {
        int a = 10;
        double b = 5.5;
        char c = 'A';
        boolean d = true;

        // Арифметические операции
        int sum = a + 5;
        double product = b * 2;

        // Операции сравнения
        boolean isEqual = (a == 10);
        boolean isGreater = (b > 4.0);

        // Логические операции
        boolean result = (d && isEqual);

        System.out.println("Sum: " + sum);  // Output: Sum: 15
        System.out.println("Product: " + product);  // Output: Product: 11.0
        System.out.println("Is Equal: " + isEqual);  // Output: Is Equal: true
        System.out.println("Is Greater: " + isGreater);  // Output: Is Greater: true
        System.out.println("Result: " + result);  // Output: Result: true
    }
}

```

### Заключение

Java предлагает широкий спектр примитивных и ссылочных типов данных, каждый из которых поддерживает различные операции. Примитивные типы данных обеспечивают высокую производительность и эффективность памяти, в то время как ссылочные типы данных обеспечивают гибкость и мощные возможности объектно-ориентированного программирования.
